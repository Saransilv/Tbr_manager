import streamlit as st
import pandas as pd
import random
import os

# Nome do arquivo CSV para armazenar os dados
DATA_FILE = "tbr_list.csv"

# Fun√ß√£o para carregar os dados da planilha
def load_data():
    if os.path.exists(DATA_FILE):
        df = pd.read_csv(DATA_FILE)
    else:
        df = pd.DataFrame(columns=["Title", "Genre", "Pages", "Hype"])
    return df

# Fun√ß√£o para salvar os dados no CSV
def save_data(df):
    df.to_csv(DATA_FILE, index=False)

# Fun√ß√£o para adicionar um novo livro
def add_book(title, genre, pages, hype):
    df = load_data()
    new_row = pd.DataFrame({
        "Title": [title],
        "Genre": [genre],
        "Pages": [pages],
        "Hype": [hype]
    })
    df = pd.concat([df, new_row], ignore_index=True)
    save_data(df)

# Fun√ß√£o para sortear um livro aleatoriamente
def pick_random_book():
    df = load_data()
    if not df.empty:
        book = df.sample().iloc[0]
        return book
    else:
        return None

# Fun√ß√£o para recomendar um livro baseado em prefer√™ncias
def recommend_book(preferred_genre, min_hype):
    df = load_data()
    if not df.empty:
        filtered = df[(df["Genre"] == preferred_genre) & (df["Hype"] >= min_hype)]
        if not filtered.empty:
            book = filtered.sample().iloc[0]
            return book
    return None

# Configura√ß√µes iniciais do Streamlit
st.set_page_config(page_title="TBR Manager", layout="centered")

st.title("üìö TBR Manager")
st.markdown("Gerencie sua lista de livros para ler, sorteie aleatoriamente ou receba recomenda√ß√µes personalizadas.")

# Se√ß√£o para adicionar um novo livro
st.header("Adicionar um Livro √† Sua Lista TBR")
with st.form(key="add_book_form"):
    title = st.text_input("T√≠tulo do Livro")
    genre = st.selectbox("G√™nero", ["Fic√ß√£o", "Fantasia", "Suspense", "Romance", "N√£o-fic√ß√£o", "Biografia", "Sci-Fi", "Outros"])
    pages = st.number_input("N√∫mero de P√°ginas", min_value=1, step=1)
    hype = st.slider("N√≠vel de Hype (1 a 5)", min_value=1, max_value=5, value=3)
    submit_button = st.form_submit_button(label="Adicionar √† Lista")

if submit_button:
    if title.strip() == "":
        st.error("Por favor, insira o t√≠tulo do livro.")
    else:
        add_book(title, genre, pages, hype)
        st.success(f"üìñ **{title}** adicionado com sucesso √† sua lista TBR!")

st.markdown("---")

# Se√ß√£o para sortear um livro
st.header("Sortear um Livro Aleatoriamente")
if st.button("üîÄ Sortear Livro"):
    book = pick_random_book()
    if book is not None:
        st.success(f"üìñ **{book['Title']}** por *{book['Genre']}* foi sorteado!")
        st.write(f"**G√™nero:** {book['Genre']}")
        st.write(f"**N√∫mero de P√°ginas:** {book['Pages']}")
        st.write(f"**Hype:** {book['Hype']} ‚≠êÔ∏è")
    else:
        st.warning("Sua lista TBR est√° vazia. Adicione alguns livros para sortear.")

st.markdown("---")

# Se√ß√£o para recomendar um livro
st.header("Recomendar um Livro Baseado nas Suas Prefer√™ncias")
with st.form(key="recommend_form"):
    preferred_genre = st.selectbox("Selecione o G√™nero Desejado", ["Fic√ß√£o", "Fantasia", "Suspense", "Romance", "N√£o-fic√ß√£o", "Biografia", "Sci-Fi", "Outros"])
    min_hype = st.slider("Selecione o N√≠vel M√≠nimo de Hype", min_value=1, max_value=5, value=3)
    recommend_button = st.form_submit_button(label="Recomendar Livro")

if recommend_button:
    book = recommend_book(preferred_genre, min_hype)
    if book is not None:
        st.success(f"üìö **Recomenda√ß√£o:** *{book['Title']}* por {book['Genre']}")
        st.write(f"**G√™nero:** {book['Genre']}")
        st.write(f"**N√∫mero de P√°ginas:** {book['Pages']}")
        st.write(f"**Hype:** {book['Hype']} ‚≠êÔ∏è")
    else:
        st.warning("Nenhum livro encontrado com os crit√©rios selecionados.")

st.markdown("---")

# Se√ß√£o para exibir a lista atual de livros
st.header("Sua Lista TBR Atual")
df = load_data()
if not df.empty:
    st.dataframe(df)
else:
    st.info("Sua lista TBR est√° vazia. Adicione alguns livros para come√ßar.")
